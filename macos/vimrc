" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
if &term=="xterm"
     set t_Co=8
     set t_Sb=^[[4%dm
     set t_Sf=^[[3%dm
endif

" set font for macvim gui
set guifont=Hack\ Nerd\ Font:h14

" set highlight color of matched search
hi Search ctermbg=DarkBlue
hi Search ctermfg=Black


" set highlight color of matched parentheses
hi MatchParen cterm=bold ctermbg=DarkGreen ctermfg=Magenta

" highlight matches when jumping to next
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>
function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=White ctermbg=Red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#\%('.@/.'\)'
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction


" syntax enable
" set background=dark
set number
set conceallevel=3
set encoding=UTF-8
" enable mouse in all mode
" basically allow scrolling
" especially in tmux
set mouse=a


" Indentation without hard tabs
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent
set backspace=indent,eol,start  " more powerful backspacing


" set the number of context lines above and below the cursor
" large value causes cursor to stay in the middle when possible
set scrolloff=999

" set autocompletation like IDE
" set completeopt=longest,menu

" use colorscheme elflord
colorscheme elflord


" cursorline highlight, stop highlight during insert mode
set cursorline
highlight CursorLine cterm=NONE ctermbg=234 ctermfg=NONE
autocmd InsertEnter * highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE
autocmd InsertLeave * highlight CursorLine cterm=NONE ctermbg=234 ctermfg=NONE


" swith cursor from block in insert mode
" source: https://gist.github.com/andyfowler/1195581
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  endif
end

" Show tabs and trails with symbols
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list


" Make the 81st column stand out
highlight ColorColumn ctermbg=Magenta
" set colorcolumn=81 " coloring whole 81st column
call matchadd('ColorColumn', '\%81v', 100) " coloring text that reaches 81st only


" prank :)
" highlight ColorColumn ctermbg=red ctermfg=blue
" exec 'set colorcolumn=' . join(range(2,180,3), ',')


" auto detect .tex files
autocmd BufRead,BufNewFile *.tex set filetype=tex


" set spell check for .md files
autocmd BufRead,BufNewFile *.md setlocal spell


" Mapping
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <C-X> :bdelete<CR>
nmap <Leader>m :CtrlPMixed<CR>
nmap <Leader>n :NERDTreeToggle<CR>
imap jj <Esc>


" ================================= LATEX =================================
" spell check on .tex files
autocmd FileType tex setlocal spell
" move cursor to next <++>
autocmd FileType tex inoremap ;n <Esc>/<++><Enter>"_c4l
autocmd FileType tex vnoremap ;n <Esc>/<++><Enter>"_c4l
autocmd FileType tex nnoremap ;n <Esc>/<++><Enter>"_c4l
" key mapping in .tex files
autocmd FileType tex inoremap ;enu \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ;ite \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ;dfr \dfrac{}{<++>}<Esc>ba


" ================================ plugins ================================
" vim-plug automatic installation
" codes before plug#begin() call
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Specify a directory for plugins
" Avoid using standard Vim directory names like 'plugin'
" Make sure you use single quotes
" https://github.com/junegunn/vim-plug
" Auto executes filetype plugin indent on, syntax enable
" Revert settings after the call
call plug#begin('~/.vim/plugged')
Plug 'dracula/vim',{'as':'dracula'}
Plug 'junegunn/vim-easy-align'
Plug 'vim-airline/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'Valloric/YouCompleteMe'
Plug 'lervag/vimtex'
call plug#end()


" Airline plugin settings
" Use powerline symbols
let g:airline_powerline_fonts = 1
" Display all buffer when there's only one tab
let g:airline#extensions#tabline#enabled = 1


" Ctrlp plugin settings
" Ignore files in gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" Exclude some files and directories
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(class|exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }


" Nerdtree setting
" When Closing the last window, close together with nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Close nerdtree once file is opened from nerdtree
let NERDTreeQuitOnOpen = 1


" vim-devicons setting
" show folder symbol
let g:WebDevIconsUnicodeDecorateFolderNodes = 1


" vim-nerdtree-syntax-highlight setting
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" YouCompleteMe setting
" Toggle YCM for only following types of files.
let g:ycm_filetype_whitelist = {
  \ "c":1,
  \ "cpp":1,
  \ "python":1,
  \ "sh":1,
  \ "java":1,
  \ }
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
" add new trigger for semantic completer
" reference from https://zhuanlan.zhihu.com/p/33046090
let g:ycm_semantic_triggers =  {
  \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
  \ 'cs,lua,javascript': ['re!\w{2}'],
  \ }
